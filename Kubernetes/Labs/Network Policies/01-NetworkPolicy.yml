---
  Note: POSTing this to the API server for your cluster will have no effect 
  unless your chosen networking solution supports network policy.
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      role: db
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - ipBlock:
            cidr: 172.17.0.0/16
            except:
              - 172.17.1.0/24
        - namespaceSelector:
            matchLabels:
              project: myproject
        - podSelector:
            matchLabels:
              role: frontend
      ports:
        - protocol: TCP
          port: 6379
  egress:
    - to:
        - ipBlock:
            cidr: 10.0.0.0/24
      ports:
        - protocol: TCP
          port: 5978

--- 
# Details
# Mandatory Fields: As with all other Kubernetes config, a NetworkPolicy needs apiVersion, kind, and metadata
# fields. For general information about working with config files, see Configure Containers Using a ConfigMap, 
# and Object Management.

# spec: NetworkPolicy spec has all the information needed to define a particular network policy in the given 
# namespace.

# podSelector: Each NetworkPolicy includes a podSelector which selects the grouping of pods to which the policy 
# applies. The example policy selects pods with the label "role=db". An empty podSelector selects all pods in 
# the namespace.

# policyTypes: Each NetworkPolicy includes a policyTypes list which may include either Ingress, Egress, or both. 
# The policyTypes field indicates whether or not the given policy applies to ingress traffic to selected pod, 
# egress traffic from selected pods, or both. If no policyTypes are specified on a NetworkPolicy then by default 
# Ingress will always be set and Egress will be set if the NetworkPolicy has any egress rules.

# ingress: Each NetworkPolicy may include a list of allowed ingress rules. Each rule allows traffic which 
# matches both the from and ports sections. The example policy contains a single rule, which matches traffic 
# on a single port, from one of three sources, the first specified via an ipBlock, the second via a 
# namespaceSelector and the third via a podSelector.

# egress: Each NetworkPolicy may include a list of allowed egress rules. Each rule allows traffic which matches 
# both the to and ports sections. The example policy contains a single rule, which matches traffic on a single 
# port to any destination in 10.0.0.0/24.

# So, the example NetworkPolicy:

# isolates "role=db" pods in the "default" namespace for both ingress and egress traffic (if they weren't 
# already isolated)

# (Ingress rules) allows connections to all pods in the "default" namespace with the label "role=db" on TCP 
# port 6379 from:

# any pod in the "default" namespace with the label "role=frontend"
# any pod in a namespace with the label "project=myproject"
# IP addresses in the ranges 172.17.0.0–172.17.0.255 and 172.17.2.0–172.17.255.255 (ie, all of 172.17.0.0/16 
# except 172.17.1.0/24)
# (Egress rules) allows connections from any pod in the "default" namespace with the label "role=db" to CIDR 
# 10.0.0.0/24 on TCP port 5978  
